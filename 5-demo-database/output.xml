<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180529 01:49:06.250" generator="Robot 2.9.2 (Python 2.7.10 on darwin)">
<suite source="/Users/gique/Documents/Document/SLIDE/robot framework/robot-demo/5-demo-database/database.robot" id="s1" name="Database">
<kw type="setup" name="Connect Database">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DATASOURCE}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.341" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='apithaic_forqa', user='apithaic_forqa', password='Password1234', host='103.233.194.99', port=3306, charset='utf8')) </msg>
<status status="PASS" endtime="20180529 01:49:06.369" starttime="20180529 01:49:06.314"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.370" starttime="20180529 01:49:06.314"></status>
</kw>
<test id="s1-t1" name="Select employee 10001 Data from database">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional</doc>
<arguments>
<arg>SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '10001';</arg>
</arguments>
<assign>
<var>${query_result}</var>
</assign>
<msg timestamp="20180529 01:49:06.372" level="INFO">Executing : Query  |  SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '10001'; </msg>
<msg timestamp="20180529 01:49:06.385" level="INFO">${query_result} = ((10001, datetime.date(1953, 9, 2), u'Georgi', u'Facello', u'M', datetime.date(1986, 6, 26)),)</msg>
<status status="PASS" endtime="20180529 01:49:06.385" starttime="20180529 01:49:06.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${10001_emp_no}</arg>
<arg>${query_result[0][0]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.388" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.388" starttime="20180529 01:49:06.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${10001_birth_date}</arg>
<arg>${query_result[0][1]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.390" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'datetime.date'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.390" starttime="20180529 01:49:06.389"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${10001_first_name}</arg>
<arg>${query_result[0][2]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.394" starttime="20180529 01:49:06.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${10001_last_name}</arg>
<arg>${query_result[0][3]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.395" starttime="20180529 01:49:06.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${10001_gender}</arg>
<arg>${query_result[0][4]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.396" starttime="20180529 01:49:06.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${10001_hire_date}</arg>
<arg>${query_result[0][5]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.397" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'datetime.date'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.397" starttime="20180529 01:49:06.397"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.398" critical="yes" starttime="20180529 01:49:06.370"></status>
</test>
<test id="s1-t2" name="Test Insert employee Data to database">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to</doc>
<arguments>
<arg>INSERT INTO `apithaic_forqa`.`employees` (`emp_no`, `birth_date`, `first_name`, `last_name`, `gender`, `hire_date`) VALUES ('${85333333_emp_no}', '${85333333_birth_date}', '${85333333_first_name}', '${85333333_last_name}', '${85333333_gender}', '${85333333_hire_date}');</arg>
</arguments>
<msg timestamp="20180529 01:49:06.401" level="INFO">Executing : Execute SQL String  |  INSERT INTO `apithaic_forqa`.`employees` (`emp_no`, `birth_date`, `first_name`, `last_name`, `gender`, `hire_date`) VALUES ('85333333', '2017-12-14', 'Ryan', 'Gique', 'M', '2017-12-14'); </msg>
<status status="PASS" endtime="20180529 01:49:06.435" starttime="20180529 01:49:06.400"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional</doc>
<arguments>
<arg>SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333';</arg>
</arguments>
<assign>
<var>${query_result}</var>
</assign>
<msg timestamp="20180529 01:49:06.436" level="INFO">Executing : Query  |  SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333'; </msg>
<msg timestamp="20180529 01:49:06.447" level="INFO">${query_result} = ((85333333, datetime.date(2017, 12, 14), u'Ryan', u'Gique', u'M', datetime.date(2017, 12, 14)),)</msg>
<status status="PASS" endtime="20180529 01:49:06.447" starttime="20180529 01:49:06.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_emp_no}</arg>
<arg>${query_result[0][0]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.451" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.452" starttime="20180529 01:49:06.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_birth_date}</arg>
<arg>${query_result[0][1]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.455" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'datetime.date'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.455" starttime="20180529 01:49:06.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_first_name}</arg>
<arg>${query_result[0][2]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.459" starttime="20180529 01:49:06.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_last_name}</arg>
<arg>${query_result[0][3]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.461" starttime="20180529 01:49:06.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_gender}</arg>
<arg>${query_result[0][4]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.466" starttime="20180529 01:49:06.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_hire_date}</arg>
<arg>${query_result[0][5]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.467" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'datetime.date'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.468" starttime="20180529 01:49:06.466"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to</doc>
<arguments>
<arg>DELETE FROM `apithaic_forqa`.`employees` WHERE `employees`.`emp_no` = 85333333</arg>
</arguments>
<msg timestamp="20180529 01:49:06.469" level="INFO">Executing : Execute SQL String  |  DELETE FROM `apithaic_forqa`.`employees` WHERE `employees`.`emp_no` = 85333333 </msg>
<status status="PASS" endtime="20180529 01:49:06.494" starttime="20180529 01:49:06.469"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional</doc>
<arguments>
<arg>SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333';</arg>
</arguments>
<assign>
<var>${query_result}</var>
</assign>
<msg timestamp="20180529 01:49:06.496" level="INFO">Executing : Query  |  SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333'; </msg>
<msg timestamp="20180529 01:49:06.508" level="INFO">${query_result} = ()</msg>
<status status="PASS" endtime="20180529 01:49:06.508" starttime="20180529 01:49:06.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>()</arg>
<arg>${query_result}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.510" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'tuple'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.511" starttime="20180529 01:49:06.510"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.511" critical="yes" starttime="20180529 01:49:06.399"></status>
</test>
<test id="s1-t3" name="Test Insert employee Data to database and check correct data with FOR loop">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to</doc>
<arguments>
<arg>INSERT INTO `apithaic_forqa`.`employees` (`emp_no`, `birth_date`, `first_name`, `last_name`, `gender`, `hire_date`) VALUES ('${85333333_emp_no}', '${85333333_birth_date}', '${85333333_first_name}', '${85333333_last_name}', '${85333333_gender}', '${85333333_hire_date}');</arg>
</arguments>
<msg timestamp="20180529 01:49:06.514" level="INFO">Executing : Execute SQL String  |  INSERT INTO `apithaic_forqa`.`employees` (`emp_no`, `birth_date`, `first_name`, `last_name`, `gender`, `hire_date`) VALUES ('85333333', '2017-12-14', 'Ryan', 'Gique', 'M', '2017-12-14'); </msg>
<status status="PASS" endtime="20180529 01:49:06.539" starttime="20180529 01:49:06.513"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional</doc>
<arguments>
<arg>SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333';</arg>
</arguments>
<assign>
<var>${query_result}</var>
</assign>
<msg timestamp="20180529 01:49:06.539" level="INFO">Executing : Query  |  SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333'; </msg>
<msg timestamp="20180529 01:49:06.551" level="INFO">${query_result} = ((85333333, datetime.date(2017, 12, 14), u'Ryan', u'Gique', u'M', datetime.date(2017, 12, 14)),)</msg>
<status status="PASS" endtime="20180529 01:49:06.551" starttime="20180529 01:49:06.539"></status>
</kw>
<kw type="for" name="${user} IN [ @{query_result} ]">
<kw type="foritem" name="${user} = (85333333, datetime.date(2017, 12, 14), u'Ryan', u'Gique', u'M', datetime.date(2017, 12, 14))">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>@{user}[0] - @{user}[1] - @{user}[2]</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.554" starttime="20180529 01:49:06.553"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.554" starttime="20180529 01:49:06.553"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.554" starttime="20180529 01:49:06.552"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to</doc>
<arguments>
<arg>DELETE FROM `apithaic_forqa`.`employees` WHERE `employees`.`emp_no` = 85333333</arg>
</arguments>
<msg timestamp="20180529 01:49:06.556" level="INFO">Executing : Execute SQL String  |  DELETE FROM `apithaic_forqa`.`employees` WHERE `employees`.`emp_no` = 85333333 </msg>
<status status="PASS" endtime="20180529 01:49:06.577" starttime="20180529 01:49:06.555"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.579" critical="yes" starttime="20180529 01:49:06.512"></status>
</test>
<test id="s1-t4" name="Test update employee Data to database">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to</doc>
<arguments>
<arg>INSERT INTO `apithaic_forqa`.`employees` (`emp_no`, `birth_date`, `first_name`, `last_name`, `gender`, `hire_date`) VALUES ('${85333333_emp_no}', '${85333333_birth_date}', '${85333333_first_name}', '${85333333_last_name}', '${85333333_gender}', '${85333333_hire_date}');</arg>
</arguments>
<msg timestamp="20180529 01:49:06.581" level="INFO">Executing : Execute SQL String  |  INSERT INTO `apithaic_forqa`.`employees` (`emp_no`, `birth_date`, `first_name`, `last_name`, `gender`, `hire_date`) VALUES ('85333333', '2017-12-14', 'Ryan', 'Gique', 'M', '2017-12-14'); </msg>
<status status="PASS" endtime="20180529 01:49:06.620" starttime="20180529 01:49:06.580"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional</doc>
<arguments>
<arg>SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333';</arg>
</arguments>
<assign>
<var>${query_result}</var>
</assign>
<msg timestamp="20180529 01:49:06.625" level="INFO">Executing : Query  |  SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333'; </msg>
<msg timestamp="20180529 01:49:06.694" level="INFO">${query_result} = ((85333333, datetime.date(2017, 12, 14), u'Ryan', u'Gique', u'M', datetime.date(2017, 12, 14)),)</msg>
<status status="PASS" endtime="20180529 01:49:06.694" starttime="20180529 01:49:06.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_emp_no}</arg>
<arg>${query_result[0][0]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.695" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.696" starttime="20180529 01:49:06.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_birth_date}</arg>
<arg>${query_result[0][1]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.698" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'datetime.date'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.698" starttime="20180529 01:49:06.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_first_name}</arg>
<arg>${query_result[0][2]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.699" starttime="20180529 01:49:06.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_last_name}</arg>
<arg>${query_result[0][3]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.700" starttime="20180529 01:49:06.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_gender}</arg>
<arg>${query_result[0][4]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.702" starttime="20180529 01:49:06.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${85333333_hire_date}</arg>
<arg>${query_result[0][5]}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.703" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'datetime.date'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.703" starttime="20180529 01:49:06.702"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to</doc>
<arguments>
<arg>UPDATE `apithaic_forqa`.`employees` SET `first_name` = 'Test Name' WHERE `employees`.`emp_no` = '${85333333_emp_no}';</arg>
</arguments>
<msg timestamp="20180529 01:49:06.706" level="INFO">Executing : Execute SQL String  |  UPDATE `apithaic_forqa`.`employees` SET `first_name` = 'Test Name' WHERE `employees`.`emp_no` = '85333333'; </msg>
<status status="PASS" endtime="20180529 01:49:06.731" starttime="20180529 01:49:06.705"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional</doc>
<arguments>
<arg>SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333';</arg>
</arguments>
<assign>
<var>${query_result}</var>
</assign>
<msg timestamp="20180529 01:49:06.732" level="INFO">Executing : Query  |  SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333'; </msg>
<msg timestamp="20180529 01:49:06.745" level="INFO">${query_result} = ((85333333, datetime.date(2017, 12, 14), u'Test Name', u'Gique', u'M', datetime.date(2017, 12, 14)),)</msg>
<status status="PASS" endtime="20180529 01:49:06.745" starttime="20180529 01:49:06.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>Test Name</arg>
<arg>${query_result[0][2]}</arg>
</arguments>
<status status="PASS" endtime="20180529 01:49:06.747" starttime="20180529 01:49:06.746"></status>
</kw>
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to</doc>
<arguments>
<arg>DELETE FROM `apithaic_forqa`.`employees` WHERE `employees`.`emp_no` = 85333333</arg>
</arguments>
<msg timestamp="20180529 01:49:06.748" level="INFO">Executing : Execute SQL String  |  DELETE FROM `apithaic_forqa`.`employees` WHERE `employees`.`emp_no` = 85333333 </msg>
<status status="PASS" endtime="20180529 01:49:06.786" starttime="20180529 01:49:06.748"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional</doc>
<arguments>
<arg>SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333';</arg>
</arguments>
<assign>
<var>${query_result}</var>
</assign>
<msg timestamp="20180529 01:49:06.790" level="INFO">Executing : Query  |  SELECT * from `apithaic_forqa`.`employees` WHERE `emp_no` = '85333333'; </msg>
<msg timestamp="20180529 01:49:06.802" level="INFO">${query_result} = ()</msg>
<status status="PASS" endtime="20180529 01:49:06.802" starttime="20180529 01:49:06.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>()</arg>
<arg>${query_result}</arg>
</arguments>
<msg timestamp="20180529 01:49:06.804" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'tuple'&gt;</msg>
<status status="PASS" endtime="20180529 01:49:06.804" starttime="20180529 01:49:06.803"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.804" critical="yes" starttime="20180529 01:49:06.579"></status>
</test>
<kw type="teardown" name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20180529 01:49:06.806" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" endtime="20180529 01:49:06.807" starttime="20180529 01:49:06.805"></status>
</kw>
<status status="PASS" endtime="20180529 01:49:06.807" starttime="20180529 01:49:06.256"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="4">Critical Tests</stat>
<stat fail="0" pass="4">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="Database" pass="4">Database</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
